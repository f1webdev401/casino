REACT_APP_API_KEY="AIzaSyAlO-bcol19T-rmqpK1ukXZy4O5sMo-AjQ"
REACT_APP_AUTH_DOMAIN="casino-208b6.firebaseapp.com"
REACT_APP_DATABASE_URL="https://casino-208b6-default-rtdb.asia-southeast1.firebasedatabase.app"
REACT_APP_PROJECT_ID="casino-208b6"
REACT_APP_STORAGE_BUCKET="casino-208b6.appspot.com"
REACT_APP_MESSAGING_SENDER_ID="497063955187"
REACT_APP_APP_ID="1:497063955187:web:52690fdecda10eb3c30586"
REACT_APP_MEASUREMENT_ID="G-WJ72GX9Q7K"

REACT_APP_FUNCTION ="let newData = [...data]
        let dats = shuffle(newData)
        setData(dats)"


REACT_APP_ROULLETE = `import '../../../assets/css/pages/games/roulette/Roulette.css'
import { useRef, useState } from 'react'
import rouletteSound from '../../../assets/audio/newaudio.mp3'
import winSound from '../../../assets/audio/price.mp3'
import UserContext from '../../../context/UserContext'
import { useContext } from 'react'
import { update , ref } from 'firebase/database'
import { db } from '../../../firebase-config'
import NeedLogin from '../../../components/NeedLogin'
const Roulette = () => {
    const {userD,setUserD} = useContext(UserContext)
    const rouletteBox = useRef<any>(null)
    const [price,setPrice] = useState<any>('')
    const [btnDisabled ,setBtnDisabled] = useState<boolean>(false)
    const [isSpin,setIsSpin] = useState<any>(false)
    const audioRef = useRef<any>(null)
    const winSoundRef = useRef<any>(null)
    const roulette_numbers = [
        [3557,3560],
        [3565,3571],
        [3575.5,3584],
        [3588,3587],
        [3601.5,3613],
        [3616,3624],
        [3628.5,3634],
        [3638.5,3642.4],
        [3647,3651],
        [3655,3661],
        [3665,3673],
        [3679,3686],
        [3693,3700],
        [3707,3713],
        [3719,3724],
        [3729,3732],
        [3739],
        [3745.5,3751],
        [3756,3763.5],
        [3763.5],
        [3782,3791],
        [3796.5,3804],
        [3809,3814],
        [3820],
        [3827,3830],
        [3835,3840],
        [3846,3853],
        [3858,3867],
        [3872,3881],
        [3886,3894],
        [3899,3904],
        [3910],
    ]
    const data = [
        {value:"Try Again" ,color: "var(--yellow)",price:"Try Again"},
        {value: "100 Lucky Points",color: "var(--green)",price:"100 Lucky Points"},
        {value:"Try Again",color: "var(--red)",price:"Try Again"},
        {value: "20 PHP",color: "var(--yellow)",price:"20 PHP"},
        {value: "100 Lucky Points",color: "var(--green)",price:"100 Lucky Points"},
        {value: "20 PHP",color: "var(--red)",price:"20 PHP"},
        {value: "100 Lucky Points",color: "var(--yellow)",price:"100 Lucky Points"},
        {value: "20 PHP",color: "var(--green)",price:"20 PHP"},
        {value:"Try Again",color: "var(--red)",price:"Try Again"},
        {value: "100 PHP",color: "var(--yellow)",price:"100 PHP"},
        {value: "100 Lucky Points",color: "var(--green)",price:"100 Lucky Points"},
        {value: "200 PHP",color: "var(--red)",price:"200 PHP"},
        {value:"Try Again",color: "var(--yellow)",price:"Try Again"},
        {value: "20 PHP",color: "var(--green)",price:"20 PHP"},
        {value: "100 Lucky Points",color: "var(--red)",price:"100 Lucky Points"},
        {value: "20 PHP",color: "var(--yellow)",price:"20 PHP"},
        {value: "100 Lucky Points",color: "var(--green)",price:"100 Lucky Points"},
        {value:"Try Again",color: "var(--red)",price:"Try Again"},
        {value: "100 Lucky Points",color: "var(--yellow)",price:"100 Lucky Points"},
        {value: "⭐ Jackpot ⭐",color: "var(--light-black)",price:"100 Lucky Points"},
        {value:"Try Again",color: "var(--red)",price:"Try Again"},
        {value: "100 Lucky Points",color: "var(--yellow)",price:"100 Lucky Points"},
        {value: "20 PHP",color: "var(--green)",price:"20 PHP"},
        {value: "20 PHP",color: "var(--red)",price:"20 PHP"},
        {value:"Try Again",color: "var(--yellow)",price:"Try Again"},
        {value: "100 Lucky Points",color: "var(--green)",price:"100 Lucky Points"},
        {value:"Try Again",color: "var(--red)",price:"Try Again"},
        {value: "20 PHP",color: "var(--yellow)",price:"20 PHP"},
        {value:"Try Again",color: "var(--green)",price:"Try Again"},
        {value: "20 PHP",color: "var(--red)",price:"20 PHP"},
        {value:"Try Again",color: "var(--yellow)",price:"Try Again"},
        {value: "20 PHP",color: "var(--green)",price:"20 PHP"},
    ]
   
    const StartSpin = async () => {
        const randomNum = [0,2,8,12,17,20,24,26,28,30,3,15,1,18,26,4,6,10,14,16,21,25,31]
        const mathRand = Math.floor(Math.random() * randomNum.length)

        setIsSpin(false)
        setBtnDisabled(true)
        setUserD((prev:any) => ({...prev,credits:parseInt(userD.credits) - 20}))
        rouletteBox.current.style.transform = `rotate(0deg)`
        rouletteBox.current.style.transition = `none`
        rouletteBox.current.style.animation = 'start .5s forwards'
        
       
        const spinList : number = randomNum[mathRand]
     
        await update(ref(db,`users/${userD.uid}`),{
            credits: parseInt(userD.credits) - 20
        })
        setTimeout(() => {
            audioRef.current.play()
            if(roulette_numbers[spinList].length ===1 ){
                rouletteBox.current.style.transform = `rotate(${-roulette_numbers[spinList][0]}deg)`
                rouletteBox.current.style.transition = `all ease-in-out 14s`
            }
            else {
                const price = (min:number,max:number) => {
                    return Math.floor(Math.random() * ((max - min) + 1)) + min;
                }
        
                rouletteBox.current.style.transform = `rotate(-${price(roulette_numbers[spinList][0],roulette_numbers[spinList][1])}deg)`
                rouletteBox.current.style.transition = `all ease-in-out 14s`
            }
        },100)
        
        setTimeout(async () => {
            setPrice(data[spinList])
            audioRef.current.pause()
            audioRef.current.currentTime = 0
            winSoundRef.current.play()
            rouletteBox.current.style.animation = ''
            if(data[spinList].price === "100 Lucky Points") {
                setUserD((prev:any) => ({...prev,luckyPoints:parseInt(userD.luckyPoints) + 100}))
                await update(ref(db,`users/${userD.uid}`),{
                    luckyPoints: parseInt(userD.luckyPoints) + 100
                })
            }
            if(data[spinList].price === "20 PHP") {
                setUserD((prev:any) => ({...prev,credits:parseInt(userD.credits) + 20}))
                await update(ref(db,`users/${userD.uid}`),{
                    credits: parseInt(userD.credits) + 20
                })
            }
        },14500)
    }
    const OkButtonHandler = async () => {
        // if(price.price === "100 Lucky Points") {
        //     setUserD((prev:any) => ({...prev,luckyPoints:parseInt(userD.luckyPoints) + 100}))
        //     await update(ref(db,`users/${userD.uid}`),{
        //         luckyPoints: parseInt(userD.luckyPoints) + 100
        //     })
        // }
        // if(price.price === "20 PHP") {
        //     setUserD((prev:any) => ({...prev,credits:parseInt(userD.credits) + 20}))
        //     await update(ref(db,`users/${userD.uid}`),{
        //         credits: parseInt(userD.credits) + 20
        //     })
        // }
        setPrice(null)
        setBtnDisabled(false)
    }
  return (
    <section className='roulette-container'>
        <NeedLogin/>
        <audio ref={winSoundRef}  src={winSound} style={{display:'none'}}></audio>
        <div className="roulette-c-bg">
        <audio style={{display: 'none'}}  ref={audioRef} src={rouletteSound}></audio>

        <div className="roulette-header">
            <h1>10k Jackpot Price. Play now!</h1>
        </div>
        <div className="roulette-game-box">
            <div className="main-roulette">
            <div className="roulette-arrow">
            </div>
            {/* <i className="fa-solid fa-arrow-down-long roulette-pointer"></i> */}
                <div ref={rouletteBox} className="roulette-box">
                    {data.map((val,index) => (
                        <div key={index} className="box-data" style={{backgroundColor: val.color}}>
                            <span>
                            {val.value}
                            </span>
                        </div>
                    ))}
                </div>
            </div>
        </div>
        
        <div className="roulette-action-button">
            {parseInt(userD?.credits) < 20 ?
            <button disabled={true} >Not Enough Credtis</button>:
            <button disabled={btnDisabled} onClick={() => setIsSpin(true)}>Start Spin</button>

            }
        </div>
        </div>


        
        {price && 
        <div className="roulette-price-model">
            <div className="roulette_price_container">
                <div className="roulette-price-text">
                    {price.price === "Try Again" ? 
                        <h1>Oppss !</h1>
                    : 
                    <h1>Congratulation You Won!</h1>
                }
                    <h1>{price.price}</h1>
                </div>
                    <div className="roulette_price_btn">
                        <button onClick={OkButtonHandler}>Ok</button>
                    </div>
            </div>                    
        </div>
        }

        {isSpin && 
        
        <div className="roulette-cs-popup">
            <div className="rcsp-body">
                <i className="fa-solid fa-xmark close-cs-popup" onClick={() => setIsSpin(false)}></i>
                <div className="rcsp-text">
                    <span>Are you sure you want to spin for </span>
                    <i className="fa-solid fa-money-bill"></i>
                    <span className='credit-20'>20 Credits</span>
                </div>
                <div className="rcsp-action">
                    <button onClick={StartSpin}>Yes</button>
                    <button onClick={() => setIsSpin(false)}>Cancel</button>
                </div>
            </div>
        </div>
        }
    </section>
  )
}

export default Roulette`


REACT_APP_UPRIZE = `import { useEffect, useRef, useState } from 'react';
import '../../../assets/css/pages/games/uprizehunt/Uprizehunt.css'
import ResultSound from '../../../assets/audio/uprizesound.mp3'

import UserContext from '../../../context/UserContext';
import { useContext } from 'react';
import { db } from '../../../firebase-config';
import { update,ref } from 'firebase/database';
import NeedLogin from '../../../components/NeedLogin';
const Uprizehunt = () => {
    const {userD,setUserD} = useContext(UserContext)
    const [data,setData] = useState<any>([
        0,0,0,0,0,
        0,0,0,0,0,
        0,0,1,0,0,
        0,0,0,0,0,
        0,0,0,0,0,
    ])
    const [selectedCard,setSelectedCard] = useState<any>("")

    const [openBox,setOpenBox] = useState<any>(false)
    const [openBoxErr,setOpenBoxErr] = useState("")
    const [isConfirmSelect,setIsConfirmSelect] = useState<any>(false)
    const [targetPrize,setTargetPrize] = useState<any>("")
    const [resultDone,setResultDone] = useState<any>(false)
    const [resetBtn,setResetBtn] = useState<any>(true)
    const ResSound = useRef<any>()
    function shuffle(array:any) {
        let currentIndex = array.length;
      
        // While there remain elements to shuffle...
        while (currentIndex != 0) {
      
          // Pick a remaining element...
          let randomIndex = Math.floor(Math.random() * currentIndex);
          currentIndex--;
      
          // And swap it with the current element.
          [array[currentIndex], array[randomIndex]] = [
            array[randomIndex], array[currentIndex]];
        }
        return array
      }
    const ShuffleCardHandler = () => {
        let newData = [...data]
        let dats = shuffle(newData)
        setData(dats)
        console.log(process.env.REACT_APP_FUNCTION)
    }
    const ChooseCardsBtn = (target:any) => {
        console.log(target)
        console.log(selectedCard)
        if(target === 1) {
            let newData = [...data]
            let dats = shuffle(newData)
            console.log(dats)
            setData(dats)
        }
        else {
        }
    }
   
    const OpenBoxHandler = () => {
        if(!selectedCard) {
            setOpenBoxErr("Please Select a Box")
        }else {
            setOpenBox(true)
        }
    }
    const ConfirmSelectBoxBtn = async () => {
        
        if(parseInt(userD.credits) < 20) {
            return;
        }
        if(parseInt(targetPrize) === 1) {
            ShuffleCardHandler()
        }
        setIsConfirmSelect(true)
        setOpenBox(false)
        setTimeout(() => {
            ResSound.current.play()
        },200)
        setTimeout(() => {
            setResultDone(true)
        },2000)
        setUserD((prev:any) => ({...prev,credits:parseInt(userD?.credits) - 1}))
        await update(ref(db,`users/${userD?.uid}`),{
            credits: parseInt(userD?.credits) - 20
        })
    }
  
    const SelectCardBtn = (target:any,targetVal:any) => {
        setSelectedCard(target)
        setTargetPrize(targetVal)
        setOpenBoxErr("")
        if(targetVal === 1) {
            ShuffleCardHandler()
        }
    }
    const ResetBtnHandler = () => {
        setSelectedCard("")
        ShuffleCardHandler()
        setOpenBox(false)
        setIsConfirmSelect(false)
        setResetBtn(true)
    }
    const CancelSelectBox = () => {
        setSelectedCard("")
        setOpenBox(false)
    }
    useEffect(() => {
        ShuffleCardHandler()
    },[])
  return (
    <section className="uprizehunt-container">
        <NeedLogin/>
        <audio src={ResultSound} ref={ResSound} style={{display:'none'}}></audio>
        <div className="uprize-h-header">
            <h1>500k Jackpot Prize ✨</h1>
        </div>
        {openBoxErr && 
        <div className="uprize-h-pick-e">
            <i className="fa-solid fa-flag"></i>
                <span>{openBoxErr}</span>
            </div>
        }
        <div className="uprize-h-game"
            style={{pointerEvents: isConfirmSelect ? "none": "auto"}}
        >
            {data && data.map((key:number,index:number) => (
                <div style={{
                    background: isConfirmSelect &&  key == 1 ? "radial-gradient(circle, rgba(18,213,18,1) 49%, rgba(47,83,24,1) 100%)" :"",
                    opacity: isConfirmSelect && key !== 1 && selectedCard !== index ? ".8" : "1",
                    border: selectedCard === index ? "5px solid var(--green)": "",
                    animation: isConfirmSelect ? 
                    "open .1s forwards .3s" : "",
                }}  className="uprize-box" key={index}>
                    {isConfirmSelect ? <span>{ key === 1 ? "🏆": "💣"}</span> : ""}
                </div>
            ))}
            {data.map((data:any,index:any) => (
                <div
                    onClick={() => SelectCardBtn(index,data)}
                    key={index}
                    style={{
                        border: selectedCard  === index ? "5px solid var(--green)": "",
                        animation: selectedCard  === index && isConfirmSelect ? "pick .3s forwards " :  isConfirmSelect ? "openall .3s forwards ":"",
                    }}
                className="cover">
                    <span>⭐SMM⭐</span>
                </div>
            ))}
            
            
        </div>

        {resultDone && 
        
        <div className="uprize-result-container">
        <div className="uprize-result">
                <div className="uprize-res-box">
                <div className="uprize-res-text">
                    <span>Opps Sorry Try Again!</span>
                </div>
                <div className="uprize-res-action">
                    <button onClick={() => {
                        setResetBtn(false)
                        setResultDone(false)}}>Ok</button>
                </div>
                </div>
            </div>
        </div>
        }
       
        <div className="uprize-action-btn">
            {/* <button onClick={() => {
                setIsShuffle(true)
               }}>Start</button> */}
               {isConfirmSelect ? 
            <button
            style={{opacity: !resetBtn ? "1": ".5",pointerEvents: !resetBtn? "auto": "none"}}
            disabled={resetBtn}
            className='uab-restart-btn'
                onClick={() => ResetBtnHandler()}
            >Restart</button> : 
               <button
               className='uab-openbox-btn'
               disabled={parseInt(userD?.credits) < 20 ? true : false}
               onClick={OpenBoxHandler}>{parseInt(userD?.credits) < 20 ? "Not enough credits": "Open Box"}</button>
            }
        </div>
        
        {openBox && 
        <div className="uprize-ss-container">
            <div className="uprize-ss-box">
                <div className="uprize-ss-header">
                    <p>Are you sure you want to open</p>
                    <p>For Credits <span>20.00</span></p>
                </div>
                <div className="uprize-ss-action">
                <button className='ussa-yes-btn' onClick={ConfirmSelectBoxBtn}>Yes</button>
                <button className='ussa-no-btn' onClick={CancelSelectBox}>No</button>
                </div>
            </div>
        </div>
        }
    </section>
  )
}

export default Uprizehunt`

GENERATE_SOURCEMAP=false
